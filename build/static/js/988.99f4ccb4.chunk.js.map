{"version":3,"file":"static/js/988.99f4ccb4.chunk.js","mappings":"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","sources":["components/error-message/ErrorMessage.tsx","pages/forget-password/ForgetPassword.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './ErrorMessage.scss'\nimport { isValidPhoneNumber } from 'react-phone-number-input'\n\nexport const ErrorMessageComponent: React.FC<{\n  fieldObj: any\n  fieldKey: string\n  updateValidity: any\n  matchObj?: any\n}> = ({ fieldObj, fieldKey, updateValidity, matchObj }) => {\n  const rules = fieldObj.validation\n  const [valid, setvalid] = useState(fieldObj.valid)\n  const [errorMessage, seterrorMessage] = useState(fieldObj.errorMessage)\n\n  useEffect(() => {\n    let validFlag = true\n    let currentErrorMessage = ''\n    //set the error messages according to priority,required is priority 1\n    if (\n      rules.required &&\n      (!fieldObj.value ||\n        fieldObj.value === null ||\n        (typeof fieldObj.value === 'string' && fieldObj.value.trim() === '') ||\n        (Array.isArray(fieldObj.value) && !fieldObj.value.length))\n    ) {\n      validFlag = false\n      currentErrorMessage = 'This is required'\n    } else if (\n      rules.minlength &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim().length < rules.minlength\n    ) {\n      validFlag = false\n      currentErrorMessage = `Minlength is ${rules.minlength}`\n    } else if (\n      rules.email &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      !fieldObj.value\n        .trim()\n        .match('[a-zA-z_.+0-9-]+@[a-zA-Z0-9-]+([.][a-zA-Z0-9]+)+')\n    ) {\n      validFlag = false\n      currentErrorMessage = 'Invalid Email'\n    } else if (\n      rules.pattern &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      !fieldObj.value.trim().match(rules.pattern)\n    ) {\n      validFlag = false\n      currentErrorMessage =\n        'Invalid Pattern' +\n        (rules.patternHint ? ` (Hint : ${rules.patternHint})` : null)\n    } else if (\n      rules.maxlength &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim().length > rules.maxlength\n    ) {\n      validFlag = false\n      currentErrorMessage = `Maxlength is ${rules.maxlength}`\n    } else if (\n      rules.min &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim() < rules.min\n    ) {\n      validFlag = false\n      currentErrorMessage = `Min is ${rules.min}`\n    } else if (\n      rules.max &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim() > rules.max\n    ) {\n      validFlag = false\n      currentErrorMessage = `Max is ${rules.max}`\n    } else if (\n      rules.match &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim() !== matchObj.value.trim()\n    ) {\n      validFlag = false\n      currentErrorMessage = 'Match Failed'\n    } else if (\n      rules.maskFixedLength &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim().length !== rules.maskFixedLength\n    ) {\n      validFlag = false\n      currentErrorMessage = `Required length is ${rules.maskFixedLength}`\n    } else if (\n      rules.maskMinLength &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim().length < rules.maskMinLength\n    ) {\n      validFlag = false\n      currentErrorMessage = `Minlength is ${rules.maskMinLength}`\n    } else if (\n      rules.maskMaxLength &&\n      fieldObj.value &&\n      typeof fieldObj.value === 'string' &&\n      fieldObj.value.trim() !== '' &&\n      fieldObj.value.trim().length > rules.maskMaxLength\n    ) {\n      validFlag = false\n      currentErrorMessage = `Maxlength is ${rules.maskMaxLength}`\n    } else if (\n      fieldObj.value &&\n      fieldObj.value.length &&\n      fieldObj.inputType === 'contactnumber' &&\n      !isValidPhoneNumber(fieldObj.value)\n    ) {\n      validFlag = false\n      currentErrorMessage = `Invalid Phone Number`\n    }\n    // else if (!valid) {\n    //     setvalid(true);\n    //     seterrorMessage(null);\n    //     if (valid != fieldObj.valid && errorMessage != fieldObj.errorMessage) {\n    //         updateValidity(valid, fieldKey, errorMessage);\n    //     }\n    // }\n\n    if (valid !== validFlag || errorMessage !== currentErrorMessage) {\n      setvalid(validFlag)\n      seterrorMessage(currentErrorMessage)\n      updateValidity(validFlag, fieldKey, currentErrorMessage)\n    }\n  })\n\n  return !valid ? (\n    <div className=\"custom-error\">\n      <span style={{ color: 'red', position: 'relative' }}>{errorMessage}</span>\n    </div>\n  ) : null\n}\n","import React, { FormEvent, useState } from 'react'\nimport './ForgetPassword.scss'\nimport { ImageUrl } from '../../utils/ImageUrl'\nimport { NavLink, useHistory } from 'react-router-dom'\nimport { ROUTE_CONSTANTS } from '../../constants/RouteConstants'\nimport { InputText } from 'primereact/inputtext'\nimport { ErrorMessageComponent } from '../../components/error-message/ErrorMessage'\nimport { ToasterService } from '../../services/toaster-service/toaster-service'\nimport { AuthService } from '../../services/auth-service/auth.service'\nimport { CONSTANTS } from '../../constants/Constants'\nimport { HTTP_RESPONSE } from '../../enums/http-responses.enum'\n\nconst ForgetPassword: React.FC = () => {\n  const history = useHistory()\n  const [forgetPasswordState, setForgetPasswordState] = useState({\n    forgetPasswordForm: {\n      email: {\n        value: '',\n        validation: {\n          require: true,\n          email: true,\n          minlength: 2,\n          maxlength: 100,\n        },\n        valid: true,\n        touched: false,\n        errorMessage: null,\n      },\n    },\n  })\n\n  const [isFormValid, setIsFormValid] = useState(true)\n  const [showLoader, setShowLoader] = useState(false)\n\n  const inputChangedHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    fieldKey: string\n  ) => {\n    const updatedForm: any = { ...forgetPasswordState.forgetPasswordForm }\n    updatedForm[fieldKey].value = event.target.value\n    setForgetPasswordState({ forgetPasswordForm: updatedForm })\n  }\n\n  const blurHandler = (fieldKey: string) => {\n    const updatedForm: any = { ...forgetPasswordState.forgetPasswordForm }\n    updatedForm[fieldKey].touched = true\n    setForgetPasswordState({ forgetPasswordForm: updatedForm })\n  }\n\n  const updateValidityHandler = (\n    value: boolean,\n    fieldKey: string,\n    errorMessage: string\n  ) => {\n    const updatedForm: any = { ...forgetPasswordState.forgetPasswordForm }\n    updatedForm[fieldKey].valid = value\n    updatedForm[fieldKey].errorMessage = errorMessage\n    setForgetPasswordState({ forgetPasswordForm: updatedForm })\n  }\n\n  const checkFormValidity = () => {\n    let valid = true\n    Object.entries(forgetPasswordState.forgetPasswordForm).forEach(\n      ([key, value]) => {\n        if (!value.valid || !value.touched) {\n          valid = false\n        }\n      }\n    )\n    setIsFormValid(valid)\n    return valid\n  }\n\n  const forgetPasswordHandler = (event: FormEvent) => {\n    event?.preventDefault()\n    if (checkFormValidity()) {\n      const formData: { [key: string]: any } = {}\n      formData.email = forgetPasswordState.forgetPasswordForm.email.value\n      setShowLoader(true)\n      AuthService.forgetPassword(formData).then((response: any) => {\n        if (response?.statusCode == HTTP_RESPONSE.REQUEST_SUCCESS) {\n          ToasterService.show(\n            'Forget Pasword Link has been sent to your Email Address.',\n            CONSTANTS.SUCCESS\n          )\n          history.push(ROUTE_CONSTANTS.LOGIN)\n          window.location.reload()\n        }\n      })\n    } else {\n      ToasterService.show('Please check your Email Address!', CONSTANTS.ERROR)\n    }\n  }\n\n  return (\n    <div className=\"forgetPasswordMainBody\">\n      <div className=\"forgetPassword-right-body\">\n        <h3>Start Your Journey with Vega Coupon Store</h3>\n        <p>\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Dolorem\n          culpa ipsa blanditiis consectetur voluptatibus harum odit quas,\n          adipisci eos rerum.\n        </p>\n        <img src={ImageUrl.LoginImage} alt=\"\" />\n      </div>\n      <div className=\"forgetPasswordBody\">\n        <div className=\"forgetPasswordContent\">\n          <div className=\"brandLogo\">\n            <img src={ImageUrl.VegaLogo} alt=\"\" />\n          </div>\n          <h2>Forgot Password</h2>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ac\n            eleifend lorem, vitae blandit sapiwen.{' '}\n          </p>\n\n          <form action=\"\">\n            <div className=\"inputItem\">\n              <div className=\"row m-0\">\n                <div className=\"col-12 p-0\">\n                  <label>Email Address</label>\n                  {/* <input type=\"text\" placeholder=\"Email Address\" /> */}\n                  <InputText\n                    id=\"email\"\n                    placeholder=\"Email Address\"\n                    value={forgetPasswordState.forgetPasswordForm.email.value}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                      inputChangedHandler(event, 'email')\n                    }}\n                    onBlur={() => blurHandler('email')}\n                  />\n                  {forgetPasswordState.forgetPasswordForm.email.touched ||\n                  !isFormValid ? (\n                    <ErrorMessageComponent\n                      fieldObj={forgetPasswordState.forgetPasswordForm.email}\n                      fieldKey=\"email\"\n                      updateValidity={updateValidityHandler}\n                    ></ErrorMessageComponent>\n                  ) : null}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"returnToSignIn\">\n              <NavLink to={ROUTE_CONSTANTS.LOGIN} exact>\n                <h6>\n                  Return to <span>Sign In</span>\n                </h6>\n              </NavLink>\n            </div>\n            <div className=\"submitFormItem\">\n              <button className=\"btn\" onClick={forgetPasswordHandler}>\n                Continue\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <img className=\"dotGridImgTR\" src={ImageUrl.LoginDotGrid} alt=\"\" />\n      <img className=\"dotGridImgBL\" src={ImageUrl.LoginDotGrid} alt=\"\" />\n    </div>\n  )\n}\n\nexport default ForgetPassword\n"],"names":["ErrorMessageComponent","_ref","fieldObj","fieldKey","updateValidity","matchObj","rules","validation","valid","setvalid","useState","errorMessage","seterrorMessage","useEffect","validFlag","currentErrorMessage","required","value","trim","Array","isArray","length","minlength","concat","email","match","pattern","patternHint","maxlength","min","max","maskFixedLength","maskMinLength","maskMaxLength","inputType","isValidPhoneNumber","_jsx","className","children","style","color","position","ForgetPassword","history","useHistory","forgetPasswordState","setForgetPasswordState","forgetPasswordForm","require","touched","isFormValid","setIsFormValid","showLoader","setShowLoader","_jsxs","src","ImageUrl","LoginImage","alt","VegaLogo","action","InputText","id","placeholder","onChange","event","inputChangedHandler","updatedForm","_objectSpread","target","onBlur","blurHandler","updateValidityHandler","NavLink","to","ROUTE_CONSTANTS","LOGIN","exact","onClick","preventDefault","checkFormValidity","Object","entries","forEach","key","formData","AuthService","forgetPassword","then","response","statusCode","HTTP_RESPONSE","REQUEST_SUCCESS","ToasterService","show","CONSTANTS","SUCCESS","push","window","location","reload","ERROR","LoginDotGrid"],"sourceRoot":""}